<?xml version="1.0" encoding="UTF-8"?>
<!-- Converted by db4-upgrade version 1.0 -->
<article version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <info>
    <title>Client Properties</title>

    <author>
      <personname><firstname>Kathryn</firstname><surname>Huxtable</surname></personname>

      <affiliation>
        <orgname>kathrynhuxtable.org</orgname>
      </affiliation>
    </author>

    <pubdate>2008-02-28</pubdate>
  </info>

  <section>
    <info>
      <title>Client Properties</title>
    </info>
    
    <para>Seaglass makes use of some client properties to control the look or behavior of some components.
    To set a property on a given component you can do so with <code>component.putClientProperty(propertName, value)</code>
    This will activate the feature on a single component. If you want to activate this on all components you can specify 
    a system property with the same name (<code>System.setProperty(propertyName, value)</code> or via the java command line -D option). 
    Settings on component level will have precedence over the global settings. 
    </para>

    <para>We currently support Mac-style properties on buttons to make them
    look different when used on our background gradient and to segment them.
    See <link
    xlink:href="http://developer.apple.com/mac/library/technotes/tn2007/tn2196.html">Apple
    Technical Note TN2196</link> for more information.</para>

    <section>
      <info>
        <title>Common properties</title>
      </info>

      <para>We support the <code>JComponent.sizeVariant</code> property with
      values of <code>"large"</code>, <code>"regular"</code> (the default),
      <code>"small"</code>, and <code>"mini"</code>. See the table for
      examples:</para>

      <informaltable>
        <textobject>
          <phrase>common properties</phrase>
        </textobject>

        <tgroup cols="5">
          <thead>
            <row>
              <entry>JComponent.sizeVariant</entry>

              <entry>"large"</entry>

              <entry>"regular"</entry>

              <entry>"small"</entry>

              <entry>"mini"</entry>
            </row>
          </thead>

          <tbody class="foo">
            <row>
              <entry>Push Button</entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button-large.png" />
                  </imageobject>

                  <textobject>
                    <phrase>large size button</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button.png" />
                  </imageobject>

                  <textobject>
                    <phrase>regular size button</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button-small.png" />
                  </imageobject>

                  <textobject>
                    <phrase>small size button</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button-mini.png" />
                  </imageobject>

                  <textobject>
                    <phrase>mini size button</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>
            </row>

            <row>
              <entry>Check Box</entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/checkbox-large.png" />
                  </imageobject>

                  <textobject>
                    <phrase>large size checkbox</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/checkbox.png" />
                  </imageobject>

                  <textobject>
                    <phrase>regular size checkbox</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/checkbox-small.png" />
                  </imageobject>

                  <textobject>
                    <phrase>small size checkbox</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/checkbox-mini.png" />
                  </imageobject>

                  <textobject>
                    <phrase>mini size checkbox</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>
            </row>

            <row>
              <entry>Radio Button</entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/radiobutton-large.png" />
                  </imageobject>

                  <textobject>
                    <phrase>large size radiobutton</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/radiobutton.png" />
                  </imageobject>

                  <textobject>
                    <phrase>regular size radiobutton</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/radiobutton-small.png" />
                  </imageobject>

                  <textobject>
                    <phrase>small size radiobutton</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>

              <entry>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/radiobutton-mini.png" />
                  </imageobject>

                  <textobject>
                    <phrase>mini size radiobutton</phrase>
                  </textobject>
                </inlinemediaobject>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>If the value <code>"scale"</code> is specified, then the button
      height is not constrained and will scale smoothly. Otherwise it is
      forced into one of the sizes above, and centered in the control's
      height.</para>
    </section>

    <section>
      <info>
        <title><classname>JButton</classname> properties</title>
      </info>

      <para>Use the <code>JButton.buttonType</code> property with values of
      <code>"textured"</code>, <code>"segmented"</code>, or
      <code>"segmentedTextured"</code>. To segment the buttons, set the
      <code>JButton.segmentPosition</code> property to one of
      <code>"first"</code>, <code>"middle"</code>, or <code>"last"</code>. The
      value <code>"only"</code> is also supported.</para>

      <para>See the table below for examples:</para>

      <informaltable>
        <textobject>
          <phrase>button property settings</phrase>
        </textobject>

        <tgroup cols="5">
          <thead>
            <row>
              <entry>Button style</entry>

              <entry>first</entry>

              <entry>middle</entry>

              <entry>last</entry>

              <entry>only</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>segmented</entry>

              <entry><inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button-first.png"></imagedata>
                  </imageobject>

                  <textobject>
                    <phrase>segmented first button</phrase>
                  </textobject>
                </inlinemediaobject></entry>

              <entry><inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button-middle.png"></imagedata>
                  </imageobject>

                  <textobject>
                    <phrase>segmented middle button</phrase>
                  </textobject>
                </inlinemediaobject></entry>

              <entry><inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button-last.png"></imagedata>
                  </imageobject>

                  <textobject>
                    <phrase>segmented last button</phrase>
                  </textobject>
                </inlinemediaobject></entry>

              <entry><inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button.png"></imagedata>
                  </imageobject>

                  <textobject>
                    <phrase>segmented only button</phrase>
                  </textobject>
                </inlinemediaobject></entry>
            </row>

            <row>
              <entry>segmentedTextured</entry>

              <entry><inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button-textured-first.png"></imagedata>
                  </imageobject>

                  <textobject>
                    <phrase>segmented textured first button</phrase>
                  </textobject>
                </inlinemediaobject></entry>

              <entry><inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button-textured-middle.png"></imagedata>
                  </imageobject>

                  <textobject>
                    <phrase>segmented textured middle button</phrase>
                  </textobject>
                </inlinemediaobject></entry>

              <entry><inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button-textured-last.png"></imagedata>
                  </imageobject>

                  <textobject>
                    <phrase>segmented textured last button</phrase>
                  </textobject>
                </inlinemediaobject></entry>

              <entry><inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="gen/button-textured.png"></imagedata>
                  </imageobject>

                  <textobject>
                    <phrase>segmented textured only button</phrase>
                  </textobject>
                </inlinemediaobject></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section>
      <info>
        <title><classname>JRootPane</classname> properties</title>
      </info>

      <para>We support a "unified tool bar" look by setting the
      <code>SeaGlass.UnifiedToolbarLook</code> property to
      <code>Boolean.TRUE</code> on the root pane or the internal frame. This
      will paint the background of the root pane's content pane with a
      gradient that meshes with the title pane, and it will call
      <code>setOpaque(false)</code> on the content pane. Without this you will
      have a very light gray background on the contents. On a Mac, this causes
      the <code>apple.awt.brushMetalLook</code> property to be set.</para>

      <para>On a non-Mac platform, setting the
      <code>JRootPane.MenuInTitle</code> property to <code>Boolean.TRUE</code>
      will place the menu bar in the title bar instead of below it. Note that
      it is your responsibility to make sure that it fits with the
      title.</para>

      <para>On the Mac platform, we support the root pane property
      <code>Window.documentModified</code> such that if it is set to
      <code>Boolean.TRUE</code> the close button will have a bullet in it,
      indicating that the document has been modified.</para>
    </section>

    <section>
      <info>
        <title><classname>JScrollBar</classname> and
        <classname>JScrollPane</classname> properties</title>
      </info>

      <para>On a scroll bar, setting the
      <code>SeaGlass.Override.ScrollBarButtonsTogether</code> property to
      <code>Boolean.TRUE</code> will place the scroll bar buttons together at
      the left or bottom of the scroll bar, as on a Mac.</para>

      <para>We support the Nimbus <code>JScrollBar.fastWheelScrolling</code>
      value on scroll panes such that if set to <code>Boolean.TRUE</code>
      yields a smoother and faster accelerated wheel scroll.</para>
    </section>

    <section>
      <info>
        <title><classname>JTabbedPane</classname> properties</title>
      </info>

      <para>For <classname>JTabbedPane</classname>, we support the
      <code>JTabbedPane.closeButton</code> property being set to
      <code>"left"</code> or <code>"right"</code>, which will cause a close
      button to be placed at the left or right of each tab button. Pressing
      the button will close the tab.</para>

      <para>We also support the <code>JTabbedPane.closeListener</code>
      property to capture the close action and enforce file saving and such.
      This property must be an object which implements
      <classname>org.seaglasslookandfeel.util.SeaGlassTabCloseListener</classname>,
      which has two methods:</para>

      <itemizedlist>
        <listitem>
          <para><code>boolean tabAboutToBeClosed(int tabIndex)</code></para>

          <para>This method is called when a tab is about to be closed.
          Returning <code>true</code> from this method allows the tab to be
          closed, whereas returning <code>false</code> is effectively a
          "cancel" on the close action.</para>
        </listitem>

        <listitem>
          <para><code>void tabClosed(String title, Component
          component)</code></para>

          <para>This method is called when a tab is actually closed. The title
          is the tab title text and the component is the component pane of the
          tab.</para>
        </listitem>
      </itemizedlist>

      <para>If you need to know the tabbed pane that is being affected you
      could save it in the constructor for the class.</para>
    </section>

    <section>
      <info>
        <title><classname>JTextField</classname> properties</title>
      </info>

      <para>For <classname>JTextField</classname>, we support the
      <code>JTextField.variant</code> property being set to
      <code>"search"</code>, which will create a lozenge instead of a
      rectangular field, suitable for a search field. The lozenge will have a
      magnifying glass icon to the left, and if there is any text in the field
      will have a cancel icon, consisting of a gray circle with an erased "x"
      in it to the right.</para>

      <para><informaltable>
          <textobject>
            <phrase>textfield properties</phrase>
          </textobject>

          <tgroup cols="2">
            <tbody>
              <row>
                <entry>Normal <classname>JTextField</classname></entry>

                <entry><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="gen/text-field.png"></imagedata>
                    </imageobject>

                    <textobject>
                      <phrase>text field</phrase>
                    </textobject>
                  </inlinemediaobject></entry>
              </row>

              <row>
                <entry><classname>JTextField</classname> with search and no
                text</entry>

                <entry><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="gen/search-field.png"></imagedata>
                    </imageobject>

                    <textobject>
                      <phrase>search with no text</phrase>
                    </textobject>
                  </inlinemediaobject></entry>
              </row>

              <row>
                <entry><classname>JTextField</classname> with search and
                text</entry>

                <entry><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="gen/search-field-text.png"></imagedata>
                    </imageobject>

                    <textobject>
                      <phrase>search with text</phrase>
                    </textobject>
                  </inlinemediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <para>We support the rest of the Mac <classname>JTextField</classname>
      search client properties as well, e.g.
      <code>JTextField.Search.FindAction</code>,
      <code>JTextField.Search.FindPopup</code>, and
      <code>JTextField.Search.CancelAction</code>.</para>

      <para>We have added the <code>JTextField.Search.PlaceholderText</code>
      property, which will display light gray text in a search-style text
      field if there is no text present. This is a paint effect only; no text
      is actually in the <classname>JTextField</classname> object.</para>
    </section>
    
    <section>
      <info>
        <title><classname>BorderFactory</classname> properties</title>
      </info>

      <para>For <classname>BorderFactory</classname>, we have overwritten the style of 
      some borders. If this makes problems with your application you can deactivate this 
      with the following system property. 
      <code>SeaGlass.BorderFactory.overrideDefaults</code> property being set to <code>"false"</code>
      </para>
    </section>
    
     <section>
      <info>
        <title><classname>JTextArea</classname> properties</title>
      </info>

      <para>For <classname>JTextArea</classname>, we paint lines to make it look like a scribbling pad. 
      If you do not like this you can deactivate this with the following client property. 
      <code>SeaGlass.JTextArea.drawLineSeparator</code> property being set to <code>"false"</code>
      </para>
    </section>
        
  </section>
</article>
